#!/usr/bin/env bash

###############################################################################
# Calls Azure Function to do Attestation in Microsoft Subscription.
###############################################################################

usage() {
  local prog=${0##*/}
  cat <<-EOF
  usage: $prog --storage-account --container --netlist-name --blob-container-sas

  options:
    --storage-account: Name of the storage account holding the client/customer's netlist file.
    --container: Name of the blob container in the specified storage account that contains the client/customer's netlist file.
    --netlist-name: Name of the netlist file in the specified blob container.
    --blob-container-sas: SAS token generated by the client/customer with Read/Write access to the specified container.

  Calls Azure Function to do Attestation in Microsoft Subscription.

  After compilation it calls a well-known end point to invoke the attestation service that creates my bitstream.
  
EOF
}

functionUrl="https://fpga-attestation.azurewebsites.net/api/ComputeFPGA_HttpStart"
pollFunctionUrl="https://fpga-attestation.azurewebsites.net/api/ComputeFPGA_HttpGetStatus" 

# show usage and exit if executed with no parameters
[[ $# -eq 0 ]] && usage && exit 1

# Parse command line arguments
PARAMS=''
while (("$#")); do
  case "$1" in
  --storage-account)
    storageAccountName=$2
    shift 2
    ;;
  --container)
    container=$2
    shift 2
    ;;
  --netlist-name)
    netlistName=$2
    shift 2
    ;;
  --blob-container-sas)
    blobContainerSAS=$2
    shift 2
    ;;
  -h | --help | '-?')
    usage && exit 1
    ;;
  -* | --*=) # unsupported flags
    echo "Error - Unsupported flag $1" >&2
    exit 1
    ;;
  *) # preserve positional arguments
    PARAMS="$PARAMS $1"
    shift
    ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

if [ -z "${storageAccountName}" ]; then
  echo
  echo "ERROR - The storage account name must be supplied" >&2
  echo
  usage
  exit 1
fi
if [ -z "${container}" ]; then
  echo
  echo "ERROR - The container name for the storage sccount name must be supplied" >&2
  echo
  usage
  exit 1
fi
if [ -z "${netlistName}" ]; then
  echo
  echo "ERROR - The netlist name to be validated must be supplied" >&2
  echo
  usage
  exit 1
fi
if [ -z "${blobContainerSAS}" ]; then
  echo
  echo "ERROR - SAS token for the blob container must be supplied" >&2
  echo
  usage
  exit 1
fi

tenantId=$(az account show --output tsv --query tenantId)
subscriptionId=$(az account show --output tsv --query id)
generate_post_data()
{
  cat <<EOF
{
    "ClientSubscriptionId": "$subscriptionId",
    "ClientTenantId": "$tenantId",
    "StorageAccountName": "$storageAccountName",
    "Container": "$container",
    "NetlistName": "$netlistName",
    "BlobContainerSAS": "$blobContainerSAS"
}
EOF
}

generate_poll_data()
{
  cat <<EOF
{
    "ClientSubscriptionId": "$subscriptionId",
    "ClientTenantId": "$tenantId",
    "OrchestrationId": "$instanceId"
}
EOF
}

# poll status of attestation every 30 seconds until its status becomes Completed
poll_status()
{
echo "Attestation request was submitted successfully for OrchestrationID: $instanceId"
echo "Checking the status of attestation using $pollFunctionUrl"

while : ;
do
	json=$(curl -s \
		-H "Accept: application/json" \
		-H "Content-Type:application/json" \
		-X POST --data "$(generate_poll_data)" $pollFunctionUrl)
	if [ -z "$json" ]
	then
		echo "Unable to query the status url"
		exit 1
	fi
	status=$(echo $json|python -c "import sys,json;print(json.load(sys.stdin)['orchestrationStatus'])")
	if [ $status = "Running" ] || [ $status = "Pending" ]
        then
		now=$(date -d now '+%m/%d/%Y:%H:%M:%S')
		echo "$now Status: $status"
		sleep 30
	else
		runstatus=$(echo $json|python -c "import sys,json;print(json.load(sys.stdin)['orchestrationOutput'][0])")
		output=$(echo $json|python -c "import sys,json;print('\n'.join(json.load(sys.stdin)['orchestrationOutput']))")
		break
	fi
done
status="Failed"
if [ "$runstatus" = "Attestation process succeeded" ]
then
	status="Successful"
fi

echo "$(date -d now '+%m/%d/%Y:%H:%M:%S') Validation completed. Result: $status"

echo "Please check your storage account for output files of this validation."

echo ""
echo "Output:"
echo "$output"
}

echo "$(date -d now '+%m/%d/%Y:%H:%M:%S') Submitting request to service ..."
curlout=$(curl -s \
-H "Accept: application/json" \
-H "Content-Type:application/json" \
-X POST --data "$(generate_post_data)" $functionUrl)

if [ -z "$curlout" ]
then
	echo "Unable submit attestation request"
	exit 1
fi

instanceId=$(echo "$curlout"|python -c "import sys,json;print(json.load(sys.stdin)['instanceId'])")
errorMessage=$(echo "$curlout"|python -c "import sys,json;print(json.load(sys.stdin)['errorMessage'])")

if [ "$errorMessage" = "None" ]
then
	poll_status
else
	echo "Coudn't start attestation"
	echo "$errorMessage"
	exit 1
fi





