#
# Accelize DRM Reference Design Makefile
#
VTS_PLATFORM_PATH=/tools/xilinx/platforms
VTS_PLATFORM=xilinx_u250_gen3x16_xdma_2_1_202010_1

ROOT_DIR=${PWD}
OUTPUT_DIR=${ROOT_DIR}/xclbin
DRM_XO=${OUTPUT_DIR}/drm.xo
DESIGN_OBJ=${OUTPUT_DIR}/rtl_adder_pipes_${VTS_PLATFORM}.xclbin
VTS_KERNELS = adder input output
VTS_KERNELS_OBJS = $(VTS_KERNELS:%=${OUTPUT_DIR}/%.xo)
VTS_CFG_FILE=config_files/connectivity_azure.cfg
XRT_VERSION=2021.1
DOCKER_REPO=hubxilinx/accelize_drm_demo
DOCKER_TAG=azure_np10_${XRT_VERSION}_sc
DOCKER_FILE=docker_files/azure_np10_${XRT_VERSION}.Dockerfile
ifeq ($(shell test $(basename ${XRT_VERSION}) -gt 2021; echo $$?),0)
  APP_FOLDER=apps/app.alveo.xrt_api
else
  APP_FOLDER=apps/app.alveo.opencl
endif

$(DRM_XO):
	@echo -e "\n\n===> Generating [$@] Kernel ..."
	@make -C src/drm_hdk/controller/vitis
	@mkdir -p ${OUTPUT_DIR}
	@cp -f src/drm_hdk/controller/vitis/kernel_drm_controller.xo ${DRM_XO}

$(VTS_KERNELS_OBJS):
	@echo -e "\n\n===> Generating [$@] Kernel ..."
	@mkdir -p ${OUTPUT_DIR}
	@$(eval KRNL=$(basename $(notdir $@)))
	@vivado -mode batch -source scripts/gen_${KRNL}_xo.tcl -tclargs $@ krnl_${KRNL}_stage_rtl hw ${VTS_PLATFORM}

${DESIGN_OBJ}: $(DRM_XO) $(VTS_KERNELS_OBJS)
	@echo -e "\n\n===> Generating ${DESIGN_OBJ} ..."
	@mkdir -p ${OUTPUT_DIR}
	@v++ -l --config ${VTS_CFG_FILE} -s -o ${DESIGN_OBJ} -t hw --platform ${VTS_PLATFORM_PATH}/${VTS_PLATFORM}/${VTS_PLATFORM}.xpfm $(DRM_XO) $(VTS_KERNELS_OBJS)

xclbin_attestation:
ifndef STORAGE_ACCNT
	$(error You must set the variable STORAGE_ACCNT (e.g: make STORAGE_ACCNT=XXXX xclbin_attestation))
endif
ifndef BLOB_CONTAINER
	$(error You must set the variable BLOB_CONTAINER (e.g: make BLOB_CONTAINER=XXXX xclbin_attestation))
endif
	./scripts/azure_fpga-attestation.sh ${STORAGE_ACCNT} ${BLOB_CONTAINER} ${DESIGN_OBJ}

package:
	@echo -e "\n\n===> Preparing Content w/ XRT=${XRT_VERSION} and XRT=${APP_FOLDER}..."
	@rm -rf ${VTS_PLATFORM}_package ${VTS_PLATFORM}_package.tar.gz
	@mkdir ${VTS_PLATFORM}_package
	@cp -rf ${APP_FOLDER} ${VTS_PLATFORM}_package/app
	@cp rtl_adder_pipes_${VTS_PLATFORM}.azure.xclbin ${VTS_PLATFORM}_package/.
	@tar czf ${VTS_PLATFORM}_package.tar.gz ${VTS_PLATFORM}_package
	@rm -rf ${VTS_PLATFORM}_package
	@echo -e "Package is available here: ${PWD}/${VTS_PLATFORM}_package.tar.gz"

docker_image:
	@echo -e "\n\n===> Preparing Content w/ XRT=${XRT_VERSION} and XRT=${APP_FOLDER}..."
	@$(eval DOCKER_BUILD_DIR=${ROOT_DIR}/${VTS_PLATFORM}_docker_build)
	@rm -rf ${DOCKER_BUILD_DIR} && mkdir ${DOCKER_BUILD_DIR}
	@cp ${DOCKER_FILE} ${DOCKER_BUILD_DIR}/Dockerfile
	@cp rtl_adder_pipes_${VTS_PLATFORM}.azure.xclbin ${DOCKER_BUILD_DIR}/app.azure.xclbin
	@cp -rf ${APP_FOLDER} ${DOCKER_BUILD_DIR}/app
	@$(eval DRM_BASE_ADDR=$(shell scripts/get_drm_base_address.sh ${DESIGN_OBJ}))
	@sed -i 's|<YOUR_BASE_ADDRESS>|${DRM_BASE_ADDR}|g' ${DOCKER_BUILD_DIR}/app/main.cpp
	@sed -i 's|xclbin/[*].xclbin|app.azure.xclbin|g' ${DOCKER_BUILD_DIR}/Dockerfile
	@echo -e "\n\n===> Building Docker Image ${DOCKER_REPO}:${DOCKER_TAG} ..."
	@cd ${DOCKER_BUILD_DIR} && docker build --no-cache -t ${DOCKER_REPO}:${DOCKER_TAG} .
	@echo -e "\n\n===> Pushing Docker Image ${DOCKER_REPO}:${DOCKER_TAG} ..."
	@docker push ${DOCKER_REPO}:${DOCKER_TAG}
	@echo -e "===> Docker Image ${DOCKER_REPO}:${DOCKER_TAG} ready!"

clean:
	@rm -rf tmp* vivado* packaged_kernel *.log _x .Xil *.out
	@make -C src/drm_hdk/controller/vitis clean

clean_all: clean
	@rm -rf ${OUTPUT_DIR}
	@make -C src/drm_hdk/controller/vitis cleanall

all: ${DESIGN_OBJ}
synthesis: ${DESIGN_OBJ}

.PHONY: all clean clean_all xclbin_attestation package docker_image synthesis

.DEFAULT_GOAL := all
